ContactsTopPanel<Contact> topPanel = new ContactsTopPanel<>();
ScrollingPaginationPlugin<Contact> scrollingPaginationPlugin = new ScrollingPaginationPlugin<>(10, 5);
TableConfig<Contact> tableConfig = new TableConfig<>();
tableConfig
    .addColumn(ColumnConfig.<Contact>create("id", "#")
            .sortable()
            .styleCell(cellElement -> Style.of(cellElement).setProperty("vertical-align", "middle"))
            .textAlign("right")
            .asHeader()
            .setCellRenderer(cell -> TextNode.of(cell.getTableRow().getRecord().getIndex() + 1 + ""))
            .setWidth("70px"))
    .addColumn(ColumnConfig.<Contact>create("status", "Status")
            .setWidth("80px")
            .textAlign("center")
            .setCellRenderer(cell -> {
                if (cell.getTableRow().getRecord().isActive()) {
                    return Style.of(Icons.ALL.check_circle().asElement()).setColor(Color.GREEN_DARKEN_3.getHex()).asElement();
                } else {
                    return Style.of(Icons.ALL.highlight_off().asElement()).setColor(Color.RED_DARKEN_3.getHex()).asElement();
                }
            }))
    .addColumn(ColumnConfig.<Contact>create("firstName", "First name")
            .sortable()
            .setCellRenderer(cell -> TextNode.of(cell.getTableRow().getRecord().getName()))
            .setWidth("200px"))
    .addColumn(ColumnConfig.<Contact>create("gender", "Gender")
            .setWidth("100px")
            .setCellRenderer(cell -> ContactUiUtils.getGenderElement(cell.getRecord()))
            .textAlign("center"))
    .addColumn(ColumnConfig.<Contact>create("eyeColor", "Eye color")
            .styleHeader(head -> Style.of(head).setWidth("100px"))
            .setCellRenderer(cell -> ContactUiUtils.getEyeColorElement(cell.getRecord()))
            .textAlign("center")
            .maxWidth("120px"))
    .addColumn(ColumnConfig.<Contact>create("balance", "Balance")
            .sortable()
            .setCellRenderer(cellInfo -> ContactUiUtils.getBalanceElement(cellInfo.getRecord()))
            .setWidth("200px"))
    .addColumn(ColumnConfig.<Contact>create("email", "Email")
            .setWidth("250px")
            .setCellRenderer(cell -> TextNode.of(cell.getTableRow().getRecord().getEmail())))
    .addColumn(ColumnConfig.<Contact>create("phone", "Phone")
            .setWidth("200px")
            .setCellRenderer(cell -> TextNode.of(cell.getTableRow().getRecord().getPhone())))
    .addColumn(ColumnConfig.<Contact>create("badges", "Badges")
            .setCellRenderer(cell -> {
                if (cell.getTableRow().getRecord().getAge() < 35) {
                    return Badge.create("Young")
                            .setBackground(ColorScheme.GREEN.color()).asElement();
                }
                return TextNode.of("");
            }))
    .addPlugin(scrollingPaginationPlugin)
    .addPlugin(new TopPanelPlugin<Contact>() {

        @Override
        public HTMLElement asElement() {
            return topPanel.asElement();
        }

        @Override
        public void handleEvent(TableEvent event) {
            if (TableDataUpdatedEvent.DATA_UPDATED.equals(event.getType())) {
                topPanel.update((TableDataUpdatedEvent<Contact>) event);
            }
        }
    })
    .addPlugin(new HeaderBarPlugin<Contact>("Demo table", "this a sample table with all features")
            .addActionElement(dataTable -> {
                Icon selectInactiveIcon = Icons.ALL.highlight_off()
                        .clickable()
                        .setTooltip("Select Inactive")
                        .addClickListener(evt ->
                                dataTable.getItems().forEach(item -> {
                                    if (!item.getRecord().isActive()) {
                                        item.select();
                                    } else {
                                        item.deselect();
                                    }
                                }));

                return a().add(selectInactiveIcon).asElement();
            })
            .addActionElement(dataTable -> {
                Icon selectInactiveIcon = Icons.ALL.check_circle()
                        .clickable()
                        .setTooltip("Select Active")
                        .addClickListener(evt ->
                                dataTable.getItems().forEach(tableRow -> {
                                    if (tableRow.getRecord().isActive()) {
                                        tableRow.select();
                                    } else {
                                        tableRow.deselect();
                                    }
                                }));

                return a().add(selectInactiveIcon).asElement();

            })
            .addActionElement(new HeaderBarPlugin.ClearSearch<>())
            .addActionElement(new HeaderBarPlugin.SearchTableAction<>())
    )
    .addPlugin(new RecordDetailsPlugin<>(cell -> new ContactDetails(cell).asElement()))
    .addPlugin(new SelectionPlugin<>(ColorScheme.BLUE))
    .addPlugin(new RowMarkerPlugin<>(cellInfo -> ContactUiUtils.getBalanceColor(cellInfo.getRecord())))
    .addPlugin(new SortPlugin<>())
    .addPlugin(ColumnHeaderFilterPlugin.<Contact>create()
            .addHeaderFilter("firstName", TextHeaderFilter.<Contact>create())
            .addHeaderFilter("email", TextHeaderFilter.<Contact>create())
            .addHeaderFilter("phone", TextHeaderFilter.<Contact>create())
            .addHeaderFilter("status", BooleanHeaderFilter.<Contact>create("Active", "Inactive", "Both"))
            .addHeaderFilter("gender", EnumHeaderFilter.<Contact, Gender>create(Gender.values()))
            .addHeaderFilter("balance", DoubleHeaderFilter.<Contact>create())
            .addHeaderFilter("eyeColor", SelectHeaderFilter.<Contact>create()
                    .appendChild(SelectOption.create("blue", "Blue"))
                    .appendChild(SelectOption.create("brown", "Brown"))
                    .appendChild(SelectOption.create("green", "Green"))
            )
    )
    .addPlugin(new GroupingPlugin<>(tableRow -> tableRow.getRecord().getGender().toString(),
        cellInfo -> {
            DominoElement.of(cellInfo.getElement())
                    .style()
                    .setProperty("border-bottom", "1px solid #afafaf")
                    .setPadding(px.of(5))
                    .add(ColorScheme.INDIGO.lighten_5().getBackground());
            return TextNode.of(cellInfo.getRecord().getGender().getLabel());
    }));

LocalListDataStore<Contact> localListDataSource = new LocalListDataStore<Contact>()
    .setSearchFilter(new ContactSearchFilter())
    .setRecordsSorter(new ContactSorter())
    .setPagination(scrollingPaginationPlugin.getPagination());

DataTable<Contact> table = new DataTable<>(tableConfig, localListDataSource);

element.appendChild(Card.create("ALL IN ONE", "Try all plugins and feature works together.")
    .setCollapsible()
    .appendChild(new TableStyleActions(table))
    .appendChild(table)
    .asElement());

List<Contact> contacts = ...
localListDataSource.setData(contacts);
table.load();
topPanel.update(contacts);