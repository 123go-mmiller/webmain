RadioGroup alignItemsRadioGroup = RadioGroup.create("align-items").hide();
CheckBox fillHeightCheckBox = CheckBox.create("Fill height");
RadioGroup directionsRadioGroup = RadioGroup.create("direction");
RadioGroup justifyContentRadioGroup = RadioGroup.create("justify-content");

// ********* settings part ********* //
Button addBlockButton = Button.create("ADD BLOCK");
Button resetButton = Button.create("RESET");
RadioGroup wrapRadioGroup = RadioGroup.create("wrap", "Wrap");
layoutPlaygroundCard.setBodyPaddingTop("40px")
        .appendChild(Row.create()
                .appendChild(Column.span6()
                        .appendChild(directionsRadioGroup
                                .setHelperText("Containers inside Flex Layout can have different directions")
                                .setLabel("Directions")
                                .appendChild(Radio.create(FlexDirection.LEFT_TO_RIGHT.name(), "Left to right").check())
                                .appendChild(Radio.create(FlexDirection.RIGHT_TO_LEFT.name(), "Right to left"))
                                .appendChild(Radio.create(FlexDirection.TOP_TO_BOTTOM.name(), "Top to bottom"))
                                .appendChild(Radio.create(FlexDirection.BOTTOM_TO_TOP.name(), "Bottom to top"))
                                .horizontal()
                        ))
                .appendChild(Column.span2()
                        .appendChild(fillHeightCheckBox))
                .appendChild(Column.span4()
                        .appendChild(wrapRadioGroup
                                .appendChild(Radio.create(FlexWrap.NO_WRAP.name(), "No wrap").check())
                                .appendChild(Radio.create(FlexWrap.WRAP_TOP_TO_BOTTOM.name(), "Wrap top to bottom"))
                                .appendChild(Radio.create(FlexWrap.WRAP_BOTTOM_TO_TOP.name(), "Wrap bottom to top"))
                                .horizontal())
                )
        )
        .appendChild(Row.create()
                .appendChild(Column.span6()
                        .appendChild(justifyContentRadioGroup
                                .setHelperText("Containers inside Flex Layout can be placed in different ways")
                                .setLabel("Justify Content")
                                .appendChild(Radio.create(FlexJustifyContent.START.name(), "Start").check())
                                .appendChild(Radio.create(FlexJustifyContent.END.name(), "End"))
                                .appendChild(Radio.create(FlexJustifyContent.CENTER.name(), "Center"))
                                .appendChild(Radio.create(FlexJustifyContent.SPACE_BETWEEN.name(), "Space between"))
                                .appendChild(Radio.create(FlexJustifyContent.SPACE_AROUND.name(), "Space around"))
                                .appendChild(Radio.create(FlexJustifyContent.SPACE_EVENLY.name(), "Space evenly"))
                                .horizontal()
                        ))
                .appendChild(Column.span6()
                        .appendChild(alignItemsRadioGroup
                                .setHelperText("Containers inside Flex Layout can be aligned in different ways")
                                .setLabel("Align items")
                                .appendChild(Radio.create(FlexAlign.START.name(), "Start"))
                                .appendChild(Radio.create(FlexAlign.END.name(), "End"))
                                .appendChild(Radio.create(FlexAlign.CENTER.name(), "Center"))
                                .appendChild(Radio.create(FlexAlign.STRETCH.name(), "Stretch").check())
                                .appendChild(Radio.create(FlexAlign.BASE_LINE.name(), "Base line"))
                                .horizontal()
                        )
                )
        )
        .appendChild(Row.create()
                .fullSpan(column -> {
                    column.appendChild(resetButton.linkify().style().add(Styles.pull_right))
                            .appendChild(addBlockButton.linkify().style().add(Styles.pull_right));
                })
        );

// ********* flex layout part ********* //
FlexLayout flexLayout = FlexLayout.create()
        .style()
        .add("demo-flex-layout-container")
        .get()
        .appendChild(FlexItem.create()
                .style()
                .add("demo-flex-layout-block")
                .get()
                .appendChild(h(4)))
        .appendChild(FlexItem.create()
                .style()
                .add("demo-flex-layout-block")
                .get()
                .appendChild(h(4)))
        .appendChild(FlexItem.create()
                .style()
                .add("demo-flex-layout-block")
                .get()
                .appendChild(h(4)))
        .setDirection(FlexDirection.LEFT_TO_RIGHT);

layoutPlaygroundCard.appendChild(div()
        .css("demo-flex-layout-result-container")
        .add(flexLayout)
        .asElement());

// ********* listeners part ********* //
directionsRadioGroup.addChangeHandler(direction -> {
    FlexDirection flexDirection = FlexDirection.valueOf(direction.getValue());
    if (fillHeightCheckBox.isChecked() || isVerticalDirection(flexDirection)) {
        flexLayout.style().add("fill-height");
    } else {
        flexLayout.style().remove("fill-height");
    }
    flexLayout.setDirection(flexDirection);
});

fillHeightCheckBox.addChangeHandler(value -> {
    if (value) {
        alignItemsRadioGroup.show();
        flexLayout.style().add("fill-height");
    } else {
        alignItemsRadioGroup.hide();
        flexLayout.style().remove("fill-height");
    }
});

justifyContentRadioGroup.addChangeHandler(direction -> {
    flexLayout.setJustifyContent(FlexJustifyContent.valueOf(direction.getValue()));
});

alignItemsRadioGroup.addChangeHandler(direction -> {
    flexLayout.setAlignItems(FlexAlign.valueOf(direction.getValue()));
});

wrapRadioGroup.addChangeHandler(value -> {
    flexLayout.setWrap(FlexWrap.valueOf(value.getValue()));
});

List<FlexItem> dynamicAddedItems = new ArrayList<>();

addBlockButton.addClickListener(evt -> {
    FlexItem item = FlexItem.create()
            .style()
            .add("demo-flex-layout-block")
            .get()
            .appendChild(h(4));
    flexLayout.appendChild(item);
    dynamicAddedItems.add(item);
});

resetButton.addClickListener(evt -> {
    for (FlexItem dynamicAddedItem : dynamicAddedItems) {
        dynamicAddedItem.remove();
    }
    dynamicAddedItems.clear();
});